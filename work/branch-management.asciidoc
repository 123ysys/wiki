= Git仓库分支维护 =
Git仓库的分支维护, 主要分两类情况处理: 存在上游的项目仓库和自开发的项目仓库.


== 存在上游的项目仓库分支管理 ==
原则上保留所有上游的分支, 我们在上游不同版本分支的基础上, fork出我们自己的开发分支.
下面具体描述每个分支的命名和功能.

=== case 1 ===
如果上游对每个milestone版本都有相应的"stable/<milestone codename>"分支维护, 则我们对应的
仓库按下面的描述管理.

  * master: 上游的开发分支
  * stable/<milestone codename>: 上游发布的稳定版本分支, 如stable/folsom
  * netease/<milestone codename>: 我们自己的开发分支, 和上游的milestone版本对应,
    如netease/folsom
  * netease/<milestone codename>-stable: 我们自己的稳定分支, 与开发分支对应,
    如netease/folsom-stable
  * debian/experimental: debian官方的打包分支, 对应experimental仓库
  * debian/unstable: debian官方的打包分支, 对应unstable仓库
  * debian/<milestone codename>: 我们自己的开发分支的debian打包分支, 如debian/folsom
  * debian/<milestone codename>-stable: 我们自己的稳定分支的debian打包分支,
    如debian/folsom-stable

  如果开发较大的feature需要独立的分支, 则使用netease/<feature name>命名分支

=== case 2 ===
如果上游只有一个master开发分支维护, 则我们对应的仓库按下面的描述管理.

  * master: 上游的开发分支
  * netease/master: 我们自己的开发分支
  * netease/stable: 我们自己的稳定分支
  * debian/experimental: debian官方的打包分支, 对应experimental仓库
  * debian/unstable: debian官方的打包分支, 对应unstable仓库
  * debian/netease: 我们自己的开发分支的debian打包分支
  * debian/netease-stable: 我们自己的稳定分支的debian打包分支

  如果开发较大的feature需要独立的分支, 则使用netease/<feature name>命名分支


== 自开发的项目仓库分支管理 ==

  * master: 开发分支
  * stable: 稳定分支
  * debian/netease: 我们自己的开发分支的debian打包分支
  * debian/netease-stable: 我们自己的稳定分支的debian打包分支

  如果开发较大的feature需要独立的分支, 则使用<feature name>命名分支
